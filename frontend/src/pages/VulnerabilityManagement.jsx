import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { 
  ShieldAlert, 
  AlertTriangle, 
  Clock, 
  CheckCircle, 
  XCircle, 
  Search, 
  Plus, 
  Filter,
  TrendingUp,
  Users,
  Server,
  FileText,
  Eye,
  Edit3,
  Trash2,
  Calendar,
  Target
} from 'lucide-react';

// Configuration API
const API_BASE = import.meta.env.VITE_BACKEND_URL || 'http://localhost:8000';
const api = axios.create({ baseURL: API_BASE });

// Composants utilitaires
const SeverityBadge = ({ severity }) => {
  const colors = {
    critical: 'bg-red-100 text-red-800 border-red-200',
    high: 'bg-orange-100 text-orange-800 border-orange-200',
    medium: 'bg-yellow-100 text-yellow-800 border-yellow-200',
    low: 'bg-blue-100 text-blue-800 border-blue-200',
    info: 'bg-gray-100 text-gray-800 border-gray-200'
  };
  
  return (
    <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium border ${colors[severity] || colors.info}`}>
      {severity?.toUpperCase()}
    </span>
  );
};

const StatusBadge = ({ status }) => {
  const colors = {
    new: 'bg-blue-100 text-blue-800',
    assigned: 'bg-purple-100 text-purple-800',
    in_progress: 'bg-yellow-100 text-yellow-800',
    testing: 'bg-indigo-100 text-indigo-800',
    verified: 'bg-green-100 text-green-800',
    closed: 'bg-gray-100 text-gray-800',
    rejected: 'bg-red-100 text-red-800',
    deferred: 'bg-orange-100 text-orange-800'
  };
  
  return (
    <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${colors[status] || colors.new}`}>
      {status?.replace('_', ' ').toUpperCase()}
    </span>
  );
};

// Dashboard Component
const VulnerabilityDashboard = ({ dashboardData, onCreateVuln }) => {
  if (!dashboardData) return <div>Chargement du dashboard...</div>;

  const { overview, by_severity, sla_metrics, priority_actions, recommendations } = dashboardData;

  return (
    <div className="space-y-6">
      {/* En-tête avec actions */}
      <div className="flex justify-between items-center">
        <div>
          <h2 className="text-2xl font-bold text-gray-900">Dashboard Vulnérabilités</h2>
          <p className="text-gray-600">Vue d'ensemble de la gestion des vulnérabilités</p>
        </div>
        <button
          onClick={onCreateVuln}
          className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg flex items-center space-x-2"
        >
          <Plus size={18} />
          <span>Nouvelle Vulnérabilité</span>
        </button>
      </div>

      {/* Métriques principales */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
        <div className="bg-white p-6 rounded-lg shadow-md">
          <div className="flex items-center">
            <div className="flex-shrink-0">
              <ShieldAlert className="h-8 w-8 text-red-600" />
            </div>
            <div className="ml-4">
              <p className="text-sm font-medium text-gray-500">Total Vulnérabilités</p>
              <p className="text-2xl font-bold text-gray-900">{overview.total_vulnerabilities}</p>
            </div>
          </div>
        </div>

        <div className="bg-white p-6 rounded-lg shadow-md">
          <div className="flex items-center">
            <div className="flex-shrink-0">
              <AlertTriangle className="h-8 w-8 text-orange-600" />
            </div>
            <div className="ml-4">
              <p className="text-sm font-medium text-gray-500">Ouvertes</p>
              <p className="text-2xl font-bold text-gray-900">{overview.open_vulnerabilities}</p>
            </div>
          </div>
        </div>

        <div className="bg-white p-6 rounded-lg shadow-md">
          <div className="flex items-center">
            <div className="flex-shrink-0">
              <Clock className="h-8 w-8 text-red-600" />
            </div>
            <div className="ml-4">
              <p className="text-sm font-medium text-gray-500">En Retard</p>
              <p className="text-2xl font-bold text-red-600">{overview.overdue_vulnerabilities}</p>
            </div>
          </div>
        </div>

        <div className="bg-white p-6 rounded-lg shadow-md">
          <div className="flex items-center">
            <div className="flex-shrink-0">
              <TrendingUp className="h-8 w-8 text-green-600" />
            </div>
            <div className="ml-4">
              <p className="text-sm font-medium text-gray-500">Taux de Fermeture</p>
              <p className="text-2xl font-bold text-green-600">{overview.closure_rate}</p>
            </div>
          </div>
        </div>
      </div>

      {/* Répartition par sévérité */}
      <div className="bg-white p-6 rounded-lg shadow-md">
        <h3 className="text-lg font-semibold text-gray-900 mb-4">Répartition par Sévérité</h3>
        <div className="grid grid-cols-5 gap-4">
          {Object.entries(by_severity).map(([severity, data]) => (
            <div key={severity} className="text-center p-4 border rounded-lg">
              <SeverityBadge severity={severity} />
              <div className="mt-2">
                <p className="text-2xl font-bold text-gray-900">{data.total}</p>
                <p className="text-sm text-gray-500">{data.open} ouvertes</p>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Actions prioritaires et recommandations */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Actions prioritaires */}
        <div className="bg-white p-6 rounded-lg shadow-md">
          <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
            <Target className="h-5 w-5 mr-2 text-red-600" />
            Actions Prioritaires
          </h3>
          {priority_actions.length > 0 ? (
            <ul className="space-y-2">
              {priority_actions.map((action, index) => (
                <li key={index} className="flex items-start space-x-2">
                  <div className="flex-shrink-0 w-2 h-2 bg-red-500 rounded-full mt-2"></div>
                  <span className="text-sm text-gray-700">{action}</span>
                </li>
              ))}
            </ul>
          ) : (
            <p className="text-gray-500 text-sm">✅ Aucune action prioritaire</p>
          )}
        </div>

        {/* Recommandations */}
        <div className="bg-white p-6 rounded-lg shadow-md">
          <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
            <FileText className="h-5 w-5 mr-2 text-blue-600" />
            Recommandations
          </h3>
          <ul className="space-y-2">
            {recommendations.slice(0, 4).map((rec, index) => (
              <li key={index} className="flex items-start space-x-2">
                <div className="flex-shrink-0 w-2 h-2 bg-blue-500 rounded-full mt-2"></div>
                <span className="text-sm text-gray-700">{rec}</span>
              </li>
            ))}
          </ul>
        </div>
      </div>
    </div>
  );
};

// Liste des vulnérabilités
const VulnerabilityList = ({ vulnerabilities, onViewVuln, onEditVuln, onDeleteVuln }) => {
  if (!vulnerabilities || vulnerabilities.length === 0) {
    return (
      <div className="bg-white p-8 rounded-lg shadow-md text-center">
        <ShieldAlert className="h-12 w-12 text-gray-400 mx-auto mb-4" />
        <h3 className="text-lg font-medium text-gray-900 mb-2">Aucune vulnérabilité</h3>
        <p className="text-gray-500">Commencez par créer votre première vulnérabilité.</p>
      </div>
    );
  }

  return (
    <div className="bg-white shadow-md rounded-lg overflow-hidden">
      <table className="min-w-full divide-y divide-gray-200">
        <thead className="bg-gray-50">
          <tr>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Vulnérabilité
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Sévérité
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Statut
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Assigné
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              SLA
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Actions
            </th>
          </tr>
        </thead>
        <tbody className="bg-white divide-y divide-gray-200">
          {vulnerabilities.map((vuln) => (
            <tr key={vuln.id} className="hover:bg-gray-50">
              <td className="px-6 py-4 whitespace-nowrap">
                <div>
                  <div className="text-sm font-medium text-gray-900">{vuln.title}</div>
                  <div className="text-sm text-gray-500">
                    {vuln.affected_assets_count} asset(s) • {vuln.remediation_progress} remédiation
                  </div>
                </div>
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                <SeverityBadge severity={vuln.severity} />
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                <StatusBadge status={vuln.status} />
              </td>
              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                {vuln.assigned_to || '-'}
              </td>
              <td className="px-6 py-4 whitespace-nowrap text-sm">
                {vuln.days_until_sla !== null ? (
                  <span className={`${vuln.is_overdue ? 'text-red-600' : vuln.days_until_sla <= 7 ? 'text-orange-600' : 'text-gray-600'}`}>
                    {vuln.is_overdue ? `En retard de ${Math.abs(vuln.days_until_sla)} jours` : `${vuln.days_until_sla} jours restants`}
                  </span>
                ) : (
                  <span className="text-gray-400">-</span>
                )}
              </td>
              <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                <div className="flex space-x-2">
                  <button
                    onClick={() => onViewVuln(vuln.id)}
                    className="text-blue-600 hover:text-blue-900"
                  >
                    <Eye size={16} />
                  </button>
                  <button
                    onClick={() => onEditVuln(vuln.id)}
                    className="text-green-600 hover:text-green-900"
                  >
                    <Edit3 size={16} />
                  </button>
                  <button
                    onClick={() => onDeleteVuln(vuln.id)}
                    className="text-red-600 hover:text-red-900"
                  >
                    <Trash2 size={16} />
                  </button>
                </div>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

// Formulaire de création de vulnérabilité
const CreateVulnerabilityForm = ({ onClose, onSubmit }) => {
  const [formData, setFormData] = useState({
    title: '',
    description: '',
    severity: 'medium',
    source: 'manual_review',
    vulnerability_type: '',
    technical_details: '',
    reported_by: 'Security Team'
  });

  const [isSubmitting, setIsSubmitting] = useState(false);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsSubmitting(true);
    
    try {
      await onSubmit(formData);
      onClose();
    } catch (error) {
      console.error('Erreur création vulnérabilité:', error);
    }
    
    setIsSubmitting(false);
  };

  return (
    <div className="fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg shadow-xl max-w-2xl w-full mx-4 max-h-screen overflow-y-auto">
        <div className="px-6 py-4 border-b border-gray-200">
          <h3 className="text-lg font-medium text-gray-900">Nouvelle Vulnérabilité</h3>
        </div>
        
        <form onSubmit={handleSubmit} className="p-6 space-y-6">
          <div>
            <label className="block text-sm font-medium text-gray-700">Titre</label>
            <input
              type="text"
              required
              value={formData.title}
              onChange={(e) => setFormData({ ...formData, title: e.target.value })}
              className="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
              placeholder="Titre de la vulnérabilité"
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700">Description</label>
            <textarea
              required
              rows={3}
              value={formData.description}
              onChange={(e) => setFormData({ ...formData, description: e.target.value })}
              className="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
              placeholder="Description détaillée de la vulnérabilité"
            />
          </div>

          <div className="grid grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700">Sévérité</label>
              <select
                value={formData.severity}
                onChange={(e) => setFormData({ ...formData, severity: e.target.value })}
                className="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
              >
                <option value="critical">Critique</option>
                <option value="high">Élevée</option>
                <option value="medium">Moyenne</option>
                <option value="low">Faible</option>
                <option value="info">Information</option>
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700">Source</label>
              <select
                value={formData.source}
                onChange={(e) => setFormData({ ...formData, source: e.target.value })}
                className="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
              >
                <option value="pentest">Test de pénétration</option>
                <option value="vulnerability_scanner">Scanner de vulnérabilités</option>
                <option value="manual_review">Revue manuelle</option>
                <option value="third_party_audit">Audit tiers</option>
                <option value="bug_bounty">Bug bounty</option>
                <option value="security_research">Recherche sécurité</option>
              </select>
            </div>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700">Type de vulnérabilité</label>
            <input
              type="text"
              required
              value={formData.vulnerability_type}
              onChange={(e) => setFormData({ ...formData, vulnerability_type: e.target.value })}
              className="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
              placeholder="ex: sql_injection, xss, csrf"
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700">Détails techniques</label>
            <textarea
              required
              rows={4}
              value={formData.technical_details}
              onChange={(e) => setFormData({ ...formData, technical_details: e.target.value })}
              className="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
              placeholder="Détails techniques de la vulnérabilité, étapes de reproduction, etc."
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700">Rapporté par</label>
            <input
              type="text"
              required
              value={formData.reported_by}
              onChange={(e) => setFormData({ ...formData, reported_by: e.target.value })}
              className="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
            />
          </div>

          <div className="flex justify-end space-x-3 pt-4 border-t border-gray-200">
            <button
              type="button"
              onClick={onClose}
              className="px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-50"
            >
              Annuler
            </button>
            <button
              type="submit"
              disabled={isSubmitting}
              className="px-4 py-2 bg-blue-600 text-white rounded-md text-sm font-medium hover:bg-blue-700 disabled:opacity-50"
            >
              {isSubmitting ? 'Création...' : 'Créer la vulnérabilité'}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

// Composant principal
export default function VulnerabilityManagement() {
  const [activeTab, setActiveTab] = useState('dashboard');
  const [dashboardData, setDashboardData] = useState(null);
  const [vulnerabilities, setVulnerabilities] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [showCreateForm, setShowCreateForm] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');
  const [filters, setFilters] = useState({
    severity: '',
    status: '',
    overdue: false
  });

  // Chargement des données
  const loadDashboard = async () => {
    try {
      const response = await api.get('/api/vulnerability-management/dashboard');
      setDashboardData(response.data);
    } catch (error) {
      console.error('Erreur chargement dashboard:', error);
    }
  };

  const loadVulnerabilities = async () => {
    try {
      const params = new URLSearchParams();
      if (filters.severity) params.append('severity', filters.severity);
      if (filters.status) params.append('status', filters.status);
      if (filters.overdue) params.append('overdue', 'true');
      
      const response = await api.get(`/api/vulnerability-management/vulnerabilities?${params}`);
      setVulnerabilities(response.data.vulnerabilities);
    } catch (error) {
      console.error('Erreur chargement vulnérabilités:', error);
    }
  };

  const createVulnerability = async (vulnData) => {
    try {
      await api.post('/api/vulnerability-management/vulnerability', vulnData);
      await loadDashboard();
      await loadVulnerabilities();
    } catch (error) {
      console.error('Erreur création vulnérabilité:', error);
      throw error;
    }
  };

  useEffect(() => {
    const loadData = async () => {
      setIsLoading(true);
      await Promise.all([loadDashboard(), loadVulnerabilities()]);
      setIsLoading(false);
    };
    
    loadData();
  }, [filters]);

  if (isLoading) {
    return (
      <div className="p-6 text-center">
        <div className="animate-spin rounded-full w-12 h-12 border-b-2 border-blue-600 mx-auto"></div>
        <p className="mt-4 text-gray-600">Chargement...</p>
      </div>
    );
  }

  return (
    <div className="p-6">
      <div className="mb-6">
        <h1 className="text-3xl font-bold text-gray-900 mb-2">🛡️ Vulnerability Management</h1>
        <p className="text-gray-600">Gestion complète du cycle de vie des vulnérabilités</p>
      </div>

      {/* Onglets */}
      <div className="border-b border-gray-200 mb-6">
        <nav className="-mb-px flex space-x-8">
          <button
            onClick={() => setActiveTab('dashboard')}
            className={`py-2 px-1 border-b-2 font-medium text-sm ${
              activeTab === 'dashboard'
                ? 'border-blue-500 text-blue-600'
                : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
            }`}
          >
            Dashboard
          </button>
          <button
            onClick={() => setActiveTab('vulnerabilities')}
            className={`py-2 px-1 border-b-2 font-medium text-sm ${
              activeTab === 'vulnerabilities'
                ? 'border-blue-500 text-blue-600'
                : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
            }`}
          >
            Vulnérabilités
          </button>
        </nav>
      </div>

      {/* Contenu des onglets */}
      {activeTab === 'dashboard' && (
        <VulnerabilityDashboard 
          dashboardData={dashboardData}
          onCreateVuln={() => setShowCreateForm(true)}
        />
      )}

      {activeTab === 'vulnerabilities' && (
        <div className="space-y-6">
          {/* Barre d'outils */}
          <div className="bg-white p-4 rounded-lg shadow-md">
            <div className="flex flex-col md:flex-row md:items-center md:justify-between space-y-4 md:space-y-0">
              <div className="flex-1 max-w-md">
                <div className="relative">
                  <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" size={16} />
                  <input
                    type="text"
                    placeholder="Rechercher des vulnérabilités..."
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    className="pl-10 w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
                  />
                </div>
              </div>
              
              <div className="flex items-center space-x-4">
                <select
                  value={filters.severity}
                  onChange={(e) => setFilters({ ...filters, severity: e.target.value })}
                  className="border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
                >
                  <option value="">Toutes sévérités</option>
                  <option value="critical">Critique</option>
                  <option value="high">Élevée</option>
                  <option value="medium">Moyenne</option>
                  <option value="low">Faible</option>
                </select>
                
                <select
                  value={filters.status}
                  onChange={(e) => setFilters({ ...filters, status: e.target.value })}
                  className="border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
                >
                  <option value="">Tous statuts</option>
                  <option value="new">Nouveau</option>
                  <option value="assigned">Assigné</option>
                  <option value="in_progress">En cours</option>
                  <option value="testing">Test</option>
                  <option value="closed">Fermé</option>
                </select>
                
                <button
                  onClick={() => setShowCreateForm(true)}
                  className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md flex items-center space-x-2"
                >
                  <Plus size={16} />
                  <span>Nouvelle</span>
                </button>
              </div>
            </div>
          </div>

          {/* Liste des vulnérabilités */}
          <VulnerabilityList
            vulnerabilities={vulnerabilities}
            onViewVuln={(id) => console.log('View vuln:', id)}
            onEditVuln={(id) => console.log('Edit vuln:', id)}
            onDeleteVuln={(id) => console.log('Delete vuln:', id)}
          />
        </div>
      )}

      {/* Modal de création */}
      {showCreateForm && (
        <CreateVulnerabilityForm
          onClose={() => setShowCreateForm(false)}
          onSubmit={createVulnerability}
        />
      )}
    </div>
  );
}
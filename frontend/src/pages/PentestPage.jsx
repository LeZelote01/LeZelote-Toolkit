import React, { useState, useEffect } from 'react';
import { Shield, Play, Clock, AlertTriangle, Download, Eye, Trash2, RefreshCw, Target, FileText } from 'lucide-react';
import axios from 'axios';

// Configuration API
const API_BASE = import.meta.env.VITE_BACKEND_URL || 'http://localhost:8000';
const api = axios.create({ baseURL: API_BASE });

const PentestPage = () => {
  const [currentScan, setCurrentScan] = useState(null);
  const [scanHistory, setScanHistory] = useState([]);
  const [loading, setLoading] = useState(false);
  const [scanForm, setScanForm] = useState({
    target: '',
    scanType: 'web',
    options: {}
  });
  
  const [selectedScan, setSelectedScan] = useState(null);
  const [showResults, setShowResults] = useState(false);

  const scanTypes = [
    { value: 'web', label: 'Web Application', description: 'Scan OWASP Top 10, XSS, SQL Injection' },
    { value: 'owasp', label: 'OWASP Complete', description: 'Test complet selon OWASP Top 10 2021' },
    { value: 'ssl', label: 'SSL/TLS', description: 'Analyse configuration SSL/TLS' },
    { value: 'ports', label: 'Port Scan', description: 'Découverte de ports ouverts' },
    { value: 'network', label: 'Network', description: 'Scan réseau avancé' }
  ];

  useEffect(() => {
    loadScanHistory();
  }, []);

  useEffect(() => {
    let interval;
    if (currentScan && currentScan.status !== 'completed') {
      interval = setInterval(checkScanStatus, 2000);
    }
    return () => {
      if (interval) clearInterval(interval);
    };
  }, [currentScan]);

  const loadScanHistory = async () => {
    try {
      const response = await api.get('/api/pentesting/scans');
      setScanHistory(response.data.scans || []);
    } catch (error) {
      console.error('Erreur chargement historique:', error);
    }
  };

  const startScan = async () => {
    if (!scanForm.target.trim()) {
      alert('Veuillez saisir une cible');
      return;
    }

    setLoading(true);
    try {
      const response = await api.post('/api/pentesting/scan', {
        target: scanForm.target,
        scan_type: scanForm.scanType,
        options: scanForm.options
      });

      setCurrentScan({
        scan_id: response.data.scan_id,
        target: scanForm.target,
        scan_type: scanForm.scanType,
        status: 'starting',
        progress: 5
      });

      // Réinitialiser le formulaire
      setScanForm({ target: '', scanType: 'web', options: {} });
      
    } catch (error) {
      console.error('Erreur démarrage scan:', error);
      alert('Erreur lors du démarrage du scan');
    } finally {
      setLoading(false);
    }
  };

  const checkScanStatus = async () => {
    if (!currentScan) return;

    try {
      const response = await api.get(`/api/pentesting/scan/${currentScan.scan_id}/status`);
      const status = response.data;

      setCurrentScan(prev => ({
        ...prev,
        status: status.status,
        progress: status.progress || 0,
        duration: status.duration,
        message: status.message
      }));

      if (status.status === 'completed') {
        loadScanHistory(); // Recharger l'historique
      }

    } catch (error) {
      console.error('Erreur vérification statut:', error);
    }
  };

  const viewResults = async (scanId) => {
    try {
      const response = await api.get(`/api/pentesting/scan/${scanId}/results`);
      setSelectedScan(response.data);
      setShowResults(true);
    } catch (error) {
      console.error('Erreur chargement résultats:', error);
      alert('Erreur lors du chargement des résultats');
    }
  };

  const generateReport = async (scanId, format = 'pdf') => {
    try {
      const response = await api.post(`/api/pentesting/scan/${scanId}/report`, {
        scan_id: scanId,
        format: format,
        template: 'standard'
      });
      
      alert(`Rapport ${format.toUpperCase()} généré avec succès !`);
      
    } catch (error) {
      console.error('Erreur génération rapport:', error);
      alert('Erreur lors de la génération du rapport');
    }
  };

  const deleteScan = async (scanId) => {
    if (!confirm('Êtes-vous sûr de vouloir supprimer ce scan ?')) return;

    try {
      await api.delete(`/api/pentesting/scan/${scanId}`);
      setScanHistory(prev => prev.filter(scan => scan.scan_id !== scanId));
    } catch (error) {
      console.error('Erreur suppression scan:', error);
      alert('Erreur lors de la suppression');
    }
  };

  const getSeverityColor = (level) => {
    const colors = {
      critical: 'text-red-600 bg-red-50',
      high: 'text-orange-600 bg-orange-50',
      medium: 'text-yellow-600 bg-yellow-50',
      low: 'text-blue-600 bg-blue-50',
      info: 'text-gray-600 bg-gray-50'
    };
    return colors[level] || 'text-gray-600 bg-gray-50';
  };

  const getStatusBadge = (status) => {
    const badges = {
      'starting': 'bg-yellow-100 text-yellow-800',
      'running': 'bg-blue-100 text-blue-800',
      'completed': 'bg-green-100 text-green-800',
      'failed': 'bg-red-100 text-red-800'
    };
    return badges[status] || 'bg-gray-100 text-gray-800';
  };

  if (showResults && selectedScan) {
    return (
      <div className="p-6">
        <div className="flex items-center justify-between mb-6">
          <h1 className="text-2xl font-bold text-gray-900">Résultats du Scan</h1>
          <button
            onClick={() => setShowResults(false)}
            className="px-4 py-2 text-gray-600 hover:text-gray-800"
          >
            ← Retour
          </button>
        </div>

        <div className="bg-white rounded-lg shadow p-6 mb-6">
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
            <div className="text-center">
              <div className="text-2xl font-bold text-red-600">
                {selectedScan.scan_result.summary.critical || 0}
              </div>
              <div className="text-sm text-gray-600">Critiques</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-orange-600">
                {selectedScan.scan_result.summary.high || 0}
              </div>
              <div className="text-sm text-gray-600">Élevées</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-yellow-600">
                {selectedScan.scan_result.summary.medium || 0}
              </div>
              <div className="text-sm text-gray-600">Moyennes</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-blue-600">
                {selectedScan.scan_result.summary.low || 0}
              </div>
              <div className="text-sm text-gray-600">Faibles</div>
            </div>
          </div>

          <div className="flex space-x-3">
            <button
              onClick={() => generateReport(selectedScan.scan_result.scan_id, 'pdf')}
              className="flex items-center space-x-2 px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700"
            >
              <FileText className="w-4 h-4" />
              <span>Rapport PDF</span>
            </button>
            <button
              onClick={() => generateReport(selectedScan.scan_result.scan_id, 'html')}
              className="flex items-center space-x-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
            >
              <FileText className="w-4 h-4" />
              <span>Rapport HTML</span>
            </button>
          </div>
        </div>

        {selectedScan.scan_result.vulnerabilities && selectedScan.scan_result.vulnerabilities.length > 0 ? (
          <div className="space-y-4">
            <h2 className="text-xl font-semibold">Vulnérabilités Détectées</h2>
            {selectedScan.scan_result.vulnerabilities.map((vuln, index) => (
              <div key={index} className="bg-white rounded-lg shadow p-6">
                <div className="flex items-start justify-between mb-3">
                  <h3 className="text-lg font-semibold text-gray-900">{vuln.title}</h3>
                  <span className={`px-2 py-1 rounded text-xs font-medium ${getSeverityColor(vuln.level)}`}>
                    {vuln.level.toUpperCase()}
                  </span>
                </div>
                
                <p className="text-gray-700 mb-3">{vuln.description}</p>
                
                {vuln.url && (
                  <p className="text-sm text-blue-600 mb-2">
                    <strong>URL affectée:</strong> {vuln.url}
                  </p>
                )}
                
                {vuln.owasp_category && (
                  <p className="text-sm text-gray-600 mb-2">
                    <strong>Catégorie OWASP:</strong> {vuln.owasp_category}
                  </p>
                )}
                
                <div className="mt-4 p-3 bg-blue-50 rounded">
                  <strong className="text-blue-800">Remédiation:</strong>
                  <p className="text-blue-700 mt-1">{vuln.remediation}</p>
                </div>
              </div>
            ))}
          </div>
        ) : (
          <div className="bg-green-50 border border-green-200 rounded-lg p-6 text-center">
            <Shield className="w-12 h-12 text-green-600 mx-auto mb-3" />
            <h3 className="text-lg font-semibold text-green-800 mb-2">Aucune vulnérabilité détectée</h3>
            <p className="text-green-700">Le scan n'a révélé aucune vulnérabilité critique. Continuez à maintenir de bonnes pratiques de sécurité.</p>
          </div>
        )}
      </div>
    );
  }

  return (
    <div className="p-6">
      <div className="flex items-center mb-6">
        <Shield className="w-8 h-8 text-blue-600 mr-3" />
        <div>
          <h1 className="text-2xl font-bold text-gray-900">Tests de Pénétration</h1>
          <p className="text-gray-600">Scanner automatisé OWASP Top 10 et vulnérabilités web</p>
        </div>
      </div>

      {/* Nouveau Scan */}
      <div className="bg-white rounded-lg shadow p-6 mb-6">
        <h2 className="text-lg font-semibold text-gray-900 mb-4">Nouveau Scan</h2>
        
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Cible (URL ou IP)
            </label>
            <div className="flex">
              <div className="flex items-center px-3 border border-r-0 border-gray-300 rounded-l-md bg-gray-50">
                <Target className="w-4 h-4 text-gray-400" />
              </div>
              <input
                type="text"
                value={scanForm.target}
                onChange={(e) => setScanForm(prev => ({ ...prev, target: e.target.value }))}
                placeholder="https://example.com ou 192.168.1.1"
                className="flex-1 px-3 py-2 border border-gray-300 rounded-r-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
            </div>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Type de Scan
            </label>
            <select
              value={scanForm.scanType}
              onChange={(e) => setScanForm(prev => ({ ...prev, scanType: e.target.value }))}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            >
              {scanTypes.map(type => (
                <option key={type.value} value={type.value}>{type.label}</option>
              ))}
            </select>
            <p className="text-xs text-gray-500 mt-1">
              {scanTypes.find(t => t.value === scanForm.scanType)?.description}
            </p>
          </div>
        </div>

        <button
          onClick={startScan}
          disabled={loading || !scanForm.target.trim()}
          className="mt-4 flex items-center space-x-2 px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed"
        >
          <Play className="w-4 h-4" />
          <span>{loading ? 'Démarrage...' : 'Démarrer le Scan'}</span>
        </button>
      </div>

      {/* Scan en cours */}
      {currentScan && (
        <div className="bg-white rounded-lg shadow p-6 mb-6">
          <h2 className="text-lg font-semibold text-gray-900 mb-4">Scan en cours</h2>
          
          <div className="space-y-3">
            <div className="flex justify-between items-center">
              <span className="text-sm text-gray-600">Cible: {currentScan.target}</span>
              <span className={`px-2 py-1 rounded text-xs ${getStatusBadge(currentScan.status)}`}>
                {currentScan.status}
              </span>
            </div>

            <div className="w-full bg-gray-200 rounded-full h-2">
              <div 
                className="bg-blue-600 h-2 rounded-full transition-all duration-300"
                style={{ width: `${currentScan.progress || 0}%` }}
              ></div>
            </div>

            <div className="flex justify-between items-center text-sm text-gray-600">
              <span>{currentScan.message || 'Scan en cours...'}</span>
              {currentScan.duration && (
                <span className="flex items-center">
                  <Clock className="w-4 h-4 mr-1" />
                  {Math.round(currentScan.duration)}s
                </span>
              )}
            </div>
          </div>
        </div>
      )}

      {/* Historique des scans */}
      <div className="bg-white rounded-lg shadow">
        <div className="p-6 border-b border-gray-200">
          <div className="flex items-center justify-between">
            <h2 className="text-lg font-semibold text-gray-900">Historique des Scans</h2>
            <button
              onClick={loadScanHistory}
              className="flex items-center space-x-1 text-sm text-gray-600 hover:text-gray-800"
            >
              <RefreshCw className="w-4 h-4" />
              <span>Actualiser</span>
            </button>
          </div>
        </div>

        <div className="divide-y divide-gray-200">
          {scanHistory.length === 0 ? (
            <div className="p-6 text-center text-gray-500">
              Aucun scan effectué. Démarrez votre premier scan ci-dessus.
            </div>
          ) : (
            scanHistory.map((scan) => (
              <div key={scan.scan_id} className="p-6 hover:bg-gray-50">
                <div className="flex items-center justify-between">
                  <div className="flex-1">
                    <div className="flex items-center space-x-3">
                      <h3 className="font-medium text-gray-900">{scan.target}</h3>
                      <span className={`px-2 py-1 rounded text-xs ${getStatusBadge(scan.status)}`}>
                        {scan.status}
                      </span>
                      <span className="text-xs text-gray-500 uppercase">
                        {scan.scan_type}
                      </span>
                    </div>
                    
                    <div className="mt-1 flex items-center space-x-4 text-sm text-gray-500">
                      <span>
                        {new Date(scan.start_time).toLocaleString('fr-FR')}
                      </span>
                      {scan.duration && (
                        <span className="flex items-center">
                          <Clock className="w-3 h-3 mr-1" />
                          {Math.round(scan.duration)}s
                        </span>
                      )}
                      {scan.vulnerabilities_count !== undefined && (
                        <span className="flex items-center">
                          <AlertTriangle className="w-3 h-3 mr-1" />
                          {scan.vulnerabilities_count} vulnérabilités
                        </span>
                      )}
                    </div>
                  </div>

                  <div className="flex items-center space-x-2">
                    {scan.status === 'completed' && (
                      <button
                        onClick={() => viewResults(scan.scan_id)}
                        className="flex items-center space-x-1 px-3 py-1 text-sm text-blue-600 hover:bg-blue-50 rounded"
                      >
                        <Eye className="w-4 h-4" />
                        <span>Voir</span>
                      </button>
                    )}
                    
                    <button
                      onClick={() => deleteScan(scan.scan_id)}
                      className="flex items-center space-x-1 px-3 py-1 text-sm text-red-600 hover:bg-red-50 rounded"
                    >
                      <Trash2 className="w-4 h-4" />
                    </button>
                  </div>
                </div>
              </div>
            ))
          )}
        </div>
      </div>
    </div>
  );
};

export default PentestPage;
"""
Pentest-USB Toolkit - Web Scanner Module
=======================================

Web application vulnerability scanning using multiple tools.
Orchestrates OWASP ZAP, Nuclei, and other web scanners.

Author: Pentest-USB Development Team
Version: 1.0.0
"""

from typing import Dict, List, Any, Optional
from urllib.parse import urlparse
import time

from ...core.utils.logging_handler import get_logger
from ...core.utils.error_handler import PentestError
from ...core.api.zap_api import ZapAPI


class WebScanner:
    """
    Web application vulnerability scanner module
    """
    
    def __init__(self):
        """Initialize Web Scanner"""
        self.logger = get_logger(__name__)
        self.zap_api = ZapAPI()
        
        self.logger.info("WebScanner module initialized")
    
    def scan_webapp(self, url: str, profile: str = "default") -> Dict[str, Any]:
        """
        Scan web application for vulnerabilities
        
        Args:
            url: Target web application URL
            profile: Scan profile (quick, default, comprehensive, owasp_top10)
            
        Returns:
            Web vulnerability scan results
        """
        try:
            self.logger.info(f"Starting web application scan: {url} (profile: {profile})")
            
            # Validate URL
            if not self._validate_url(url):
                raise PentestError(f"Invalid URL: {url}")
            
            # Check if ZAP is available
            if not self.zap_api.is_running():
                self.logger.warning("ZAP not available, using alternative scanning methods")
                return self._alternative_web_scan(url, profile)
            
            # Perform ZAP scan based on profile
            if profile == "quick":
                results = self._quick_zap_scan(url)
            elif profile == "comprehensive":
                results = self._comprehensive_zap_scan(url)
            else:
                results = self._default_zap_scan(url)
            
            # Process and enrich results
            processed_results = self._process_web_results(results)
            
            return {
                'target': url,
                'profile': profile,
                'status': 'completed',
                'timestamp': time.time(),
                'results': processed_results,
                'summary': self._generate_web_summary(processed_results)
            }
            
        except Exception as e:
            self.logger.error(f"Web application scan failed: {str(e)}")
            raise PentestError(f"Web scan failed: {str(e)}")
    
    def _validate_url(self, url: str) -> bool:
        """Validate target URL"""
        try:
            parsed = urlparse(url)
            return bool(parsed.netloc) and parsed.scheme in ['http', 'https']
        except:
            return False
    
    def _quick_zap_scan(self, url: str) -> Dict[str, Any]:
        """Perform quick ZAP scan (spider only)"""
        try:
            spider_results = self.zap_api.spider_scan(url)
            alerts = self.zap_api.get_alerts(url)
            
            return {
                'spider_results': spider_results,
                'alerts': alerts,
                'scan_type': 'quick'
            }
            
        except Exception as e:
            self.logger.error(f"Quick ZAP scan failed: {str(e)}")
            return {'error': str(e), 'scan_type': 'quick'}
    
    def _default_zap_scan(self, url: str) -> Dict[str, Any]:
        """Perform default ZAP scan (spider + basic active scan)"""
        try:
            # Step 1: Spider the application
            spider_results = self.zap_api.spider_scan(url)
            
            # Step 2: Perform active scan
            scan_results = self.zap_api.active_scan(url)
            
            # Step 3: Get alerts
            alerts = self.zap_api.get_alerts(url)
            
            return {
                'spider_results': spider_results,
                'scan_results': scan_results,
                'alerts': alerts,
                'scan_type': 'default'
            }
            
        except Exception as e:
            self.logger.error(f"Default ZAP scan failed: {str(e)}")
            return {'error': str(e), 'scan_type': 'default'}
    
    def _comprehensive_zap_scan(self, url: str) -> Dict[str, Any]:
        """Perform comprehensive ZAP scan"""
        try:
            # Full spider and active scan
            results = self.zap_api.spider_and_scan(url)
            
            return {
                **results,
                'scan_type': 'comprehensive'
            }
            
        except Exception as e:
            self.logger.error(f"Comprehensive ZAP scan failed: {str(e)}")
            return {'error': str(e), 'scan_type': 'comprehensive'}
    
    def _alternative_web_scan(self, url: str, profile: str) -> Dict[str, Any]:
        """Alternative web scanning when ZAP is not available"""
        self.logger.info(f"Performing alternative web scan for {url}")
        
        # Placeholder for alternative scanning methods
        # Could integrate with other tools like Nikto, Wapiti, etc.
        
        return {
            'target': url,
            'profile': profile,
            'status': 'completed_alternative',
            'timestamp': time.time(),
            'results': {
                'method': 'alternative',
                'tools_used': ['placeholder'],
                'note': 'ZAP not available, used alternative scanning methods'
            },
            'summary': {
                'vulnerabilities_found': 0,
                'scan_method': 'alternative'
            }
        }
    
    def _process_web_results(self, results: Dict[str, Any]) -> Dict[str, Any]:
        """Process and normalize web scan results"""
        processed = {
            'vulnerabilities': [],
            'discovered_urls': [],
            'technologies': [],
            'cookies': [],
            'forms': []
        }
        
        # Process alerts/vulnerabilities
        for alert in results.get('alerts', []):
            vulnerability = {
                'id': alert.get('id'),
                'name': alert.get('name', 'Unknown'),
                'severity': self._normalize_severity(alert.get('risk')),
                'confidence': alert.get('confidence'),
                'url': alert.get('url'),
                'parameter': alert.get('param'),
                'description': alert.get('description', ''),
                'solution': alert.get('solution', ''),
                'references': alert.get('reference', ''),
                'evidence': alert.get('evidence', '')
            }
            processed['vulnerabilities'].append(vulnerability)
        
        # Extract discovered URLs
        spider_results = results.get('spider_results', {})
        processed['discovered_urls'] = spider_results.get('urls', [])
        
        return processed
    
    def _normalize_severity(self, severity: str) -> str:
        """Normalize severity levels"""
        if not severity:
            return 'info'
        
        severity_lower = severity.lower()
        if severity_lower in ['high', 'critical']:
            return 'high'
        elif severity_lower == 'medium':
            return 'medium'
        elif severity_lower == 'low':
            return 'low'
        else:
            return 'info'
    
    def _generate_web_summary(self, results: Dict[str, Any]) -> Dict[str, Any]:
        """Generate web scan summary"""
        vulnerabilities = results.get('vulnerabilities', [])
        
        summary = {
            'total_vulnerabilities': len(vulnerabilities),
            'high_severity': 0,
            'medium_severity': 0,
            'low_severity': 0,
            'info_severity': 0,
            'discovered_urls': len(results.get('discovered_urls', [])),
            'vulnerability_types': set()
        }
        
        for vuln in vulnerabilities:
            severity = vuln.get('severity', 'info')
            summary[f'{severity}_severity'] += 1
            
            # Collect vulnerability types
            vuln_name = vuln.get('name', 'Unknown')
            summary['vulnerability_types'].add(vuln_name)
        
        # Convert set to list for JSON serialization
        summary['vulnerability_types'] = list(summary['vulnerability_types'])
        
        return summary
    
    def owasp_top10_scan(self, url: str) -> Dict[str, Any]:
        """Scan for OWASP Top 10 vulnerabilities"""
        return self.scan_webapp(url, "owasp_top10")
    
    def quick_scan(self, url: str) -> Dict[str, Any]:
        """Perform quick web scan"""
        return self.scan_webapp(url, "quick")
    
    def comprehensive_scan(self, url: str) -> Dict[str, Any]:
        """Perform comprehensive web scan"""
        return self.scan_webapp(url, "comprehensive")
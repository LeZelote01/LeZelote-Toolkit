# =============================================================================
# PENTEST-USB TOOLKIT - BASE DOCKER IMAGE
# =============================================================================
# Optimized base image for portable penetration testing
# Multi-stage build for reduced size and enhanced security
# =============================================================================

FROM python:3.11-slim as builder

# Build arguments
ARG DEBIAN_FRONTEND=noninteractive
ARG BUILD_DATE
ARG VERSION="1.0.0"
ARG VCS_REF

# Metadata labels
LABEL maintainer="LeZelote Team <team@lezelote.dev>" \
      version=${VERSION} \
      description="Pentest-USB Toolkit Base Image" \
      build-date=${BUILD_DATE} \
      vcs-ref=${VCS_REF} \
      security.scan-results="clean" \
      usage="docker run -it pentest-usb:base"

# =============================================================================
# SYSTEM DEPENDENCIES & SECURITY HARDENING
# =============================================================================

# Install system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    # Core system tools
    curl \
    wget \
    git \
    unzip \
    gnupg2 \
    ca-certificates \
    apt-transport-https \
    software-properties-common \
    # Network tools
    net-tools \
    netcat-traditional \
    nmap \
    dnsutils \
    whois \
    traceroute \
    tcpdump \
    # Development tools
    gcc \
    g++ \
    make \
    cmake \
    pkg-config \
    # Python dependencies
    python3-dev \
    python3-pip \
    python3-venv \
    # Security tools base
    openssl \
    ssh-client \
    # System monitoring
    htop \
    psmisc \
    procps \
    # File manipulation
    jq \
    xmlstarlet \
    # Compression tools
    gzip \
    tar \
    zip \
    # Text processing
    sed \
    awk \
    grep \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# =============================================================================
# PYTHON ENVIRONMENT SETUP
# =============================================================================

# Upgrade pip and setuptools
RUN pip3 install --no-cache-dir --upgrade \
    pip \
    setuptools \
    wheel

# Install common Python security libraries
RUN pip3 install --no-cache-dir \
    # Web frameworks
    flask==2.3.3 \
    fastapi==0.104.1 \
    uvicorn==0.24.0 \
    # HTTP libraries
    requests==2.31.0 \
    urllib3==2.0.7 \
    httpx==0.25.0 \
    # Async libraries
    aiohttp==3.9.0 \
    aiofiles==23.2.1 \
    # Data processing
    pandas==2.1.3 \
    numpy==1.25.2 \
    # Database libraries
    sqlalchemy==2.0.23 \
    psycopg2-binary==2.9.9 \
    sqlite3 \
    redis==5.0.1 \
    # Cryptography
    cryptography==41.0.7 \
    pycryptodome==3.19.0 \
    # Network libraries
    scapy==2.5.0 \
    netaddr==0.9.0 \
    dnspython==2.4.2 \
    # Security specific
    python-nmap==0.7.1 \
    shodan==1.30.1 \
    censys==2.2.8 \
    # Reporting
    jinja2==3.1.2 \
    reportlab==4.0.7 \
    python-docx==1.1.0 \
    # Utilities
    click==8.1.7 \
    rich==13.7.0 \
    typer==0.9.0 \
    colorama==0.4.6 \
    tqdm==4.66.1 \
    # Testing
    pytest==7.4.3 \
    pytest-asyncio==0.21.1

# =============================================================================
# SECURITY TOOLS INSTALLATION
# =============================================================================

# Create tools directory
RUN mkdir -p /opt/security-tools /opt/pentest-usb

# Install Go (for Go-based security tools)
RUN wget -q https://go.dev/dl/go1.21.4.linux-amd64.tar.gz \
    && tar -C /usr/local -xzf go1.21.4.linux-amd64.tar.gz \
    && rm go1.21.4.linux-amd64.tar.gz

ENV PATH="/usr/local/go/bin:${PATH}"
ENV GOPATH="/opt/go"
ENV GOROOT="/usr/local/go"

# Install essential Go-based tools
RUN go install -v github.com/projectdiscovery/nuclei/v3/cmd/nuclei@latest \
    && go install -v github.com/projectdiscovery/subfinder/v2/cmd/subfinder@latest \
    && go install -v github.com/projectdiscovery/httpx/cmd/httpx@latest \
    && go install -v github.com/projectdiscovery/naabu/v2/cmd/naabu@latest \
    && go install -v github.com/tomnomnom/waybackurls@latest \
    && go install -v github.com/tomnomnom/gau/v2/cmd/gau@latest

# Copy Go binaries to system PATH
RUN cp ${GOPATH}/bin/* /usr/local/bin/ 2>/dev/null || true

# =============================================================================
# USER SECURITY & CONFIGURATION
# =============================================================================

# Create non-root user for security
RUN groupadd -r pentest && \
    useradd -r -g pentest -d /home/pentest -s /bin/bash -c "Pentest User" pentest && \
    mkdir -p /home/pentest && \
    chown -R pentest:pentest /home/pentest

# Create necessary directories with proper permissions
RUN mkdir -p \
    /opt/pentest-usb/{core,modules,tools,data,logs,outputs,reports,config} \
    /var/log/pentest \
    /tmp/pentest \
    && chown -R pentest:pentest /opt/pentest-usb /var/log/pentest /tmp/pentest

# =============================================================================
# RUNTIME CONFIGURATION
# =============================================================================

# Set environment variables
ENV PYTHONPATH="/opt/pentest-usb:${PYTHONPATH}" \
    PENTEST_HOME="/opt/pentest-usb" \
    PENTEST_DATA="/opt/pentest-usb/data" \
    PENTEST_LOGS="/var/log/pentest" \
    PENTEST_OUTPUT="/opt/pentest-usb/outputs" \
    PATH="/opt/security-tools:/opt/pentest-usb/tools/binaries/linux:${PATH}"

# Working directory
WORKDIR /opt/pentest-usb

# Copy entrypoint script
COPY entrypoint.sh /usr/local/bin/entrypoint.sh
RUN chmod +x /usr/local/bin/entrypoint.sh

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Security: Switch to non-root user
USER pentest

# Expose common ports
EXPOSE 8080 8081 4444 5555

# Default entrypoint
ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]
CMD ["python", "-m", "interfaces.web.app"]

# =============================================================================
# BUILD INFORMATION
# =============================================================================

# Add build information as labels
LABEL org.opencontainers.image.created=${BUILD_DATE} \
      org.opencontainers.image.version=${VERSION} \
      org.opencontainers.image.revision=${VCS_REF} \
      org.opencontainers.image.title="Pentest-USB Base" \
      org.opencontainers.image.description="Secure base image for portable penetration testing toolkit" \
      org.opencontainers.image.vendor="LeZelote Team" \
      org.opencontainers.image.licenses="MIT" \
      org.opencontainers.image.source="https://github.com/LeZelote01/LeZelote-Toolkit"

# =============================================================================
# FINAL STAGE - PRODUCTION IMAGE
# =============================================================================

FROM python:3.11-slim as production

# Copy from builder stage
COPY --from=builder /usr/local /usr/local
COPY --from=builder /opt /opt
COPY --from=builder /var/log/pentest /var/log/pentest
COPY --from=builder /etc/passwd /etc/passwd
COPY --from=builder /etc/group /etc/group
COPY --from=builder /home/pentest /home/pentest

# Minimal runtime dependencies only
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Runtime configuration
ENV PYTHONPATH="/opt/pentest-usb:${PYTHONPATH}" \
    PENTEST_HOME="/opt/pentest-usb" \
    PATH="/opt/security-tools:${PATH}"

WORKDIR /opt/pentest-usb
USER pentest

HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

EXPOSE 8080 8081

ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]
CMD ["python", "-m", "interfaces.web.app"]
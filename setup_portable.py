#!/usr/bin/env python3
"""
Script de configuration portable pour CyberSec Toolkit Pro 2025
Pr√©pare l'environnement pour le d√©ploiement sur cl√© USB
"""
import os
import sys
import json
import shutil
import platform
import subprocess
from pathlib import Path

class PortableSetup:
    def __init__(self):
        self.root_dir = Path(__file__).parent
        self.portable_dir = self.root_dir / "portable"
        self.system = platform.system().lower()
        
    def create_structure(self):
        """Cr√©e la structure portable compl√®te"""
        print("üèóÔ∏è Cr√©ation de la structure portable...")
        
        directories = [
            "portable/logs",
            "portable/runtime", 
            "portable/config",
            "portable/assets",
            "portable/executables",
            "portable/dependencies",
            "portable/database/data",
            "portable/database/backups"
        ]
        
        for directory in directories:
            (self.root_dir / directory).mkdir(parents=True, exist_ok=True)
            
        print("‚úÖ Structure portable cr√©√©e")
    
    def setup_database(self):
        """Configure la base de donn√©es portable"""
        print("üìä Configuration de la base de donn√©es portable...")
        
        # Cr√©er la base SQLite vide
        db_path = self.portable_dir / "database" / "data" / "cybersec_toolkit.db"
        db_path.parent.mkdir(parents=True, exist_ok=True)
        
        # Initialiser avec le script de migration
        import sys
        sys.path.append(str(self.portable_dir))
        
        try:
            from portable.database.migrations import setup_portable_database
            import asyncio
            asyncio.run(setup_portable_database())
        except ImportError:
            # Si pas encore cr√©√©, cr√©er base simple
            import sqlite3
            conn = sqlite3.connect(str(db_path))
            conn.execute("CREATE TABLE IF NOT EXISTS documents (id TEXT, collection TEXT, document TEXT)")
            conn.commit()
            conn.close()
        
        print(f"‚úÖ Base de donn√©es SQLite cr√©√©e : {db_path}")
    
    def create_portable_requirements(self):
        """Cr√©e les requirements optimis√©s pour la portabilit√©"""
        print("üì¶ Optimisation des d√©pendances pour la portabilit√©...")
        
        portable_requirements = """# Core Framework - Portable
fastapi>=0.110.0
uvicorn[standard]>=0.25.0

# Base de donn√©es portable
aiosqlite>=0.19.0               # SQLite async (remplace motor)
sqlite3                         # SQLite standard library

# IA et LLM (conserv√©s)
emergentintegrations            # Emergent LLM key
openai>=1.10.0                 # OpenAI API (optionnel)
anthropic>=0.18.0              # Anthropic API (optionnel)

# G√©n√©ration de rapports (conserv√©s)
reportlab>=4.0.0               # PDF generation
jinja2>=3.1.0                  # Templates

# S√©curit√© et authentification (conserv√©s)
python-jose[cryptography]      # JWT tokens
passlib[bcrypt]               # Password hashing
python-multipart              # Form data

# HTTP et API (conserv√©s)
httpx>=0.26.0                 # HTTP client
requests>=2.31.0              # HTTP requests
aiofiles>=23.2.1              # Async file operations

# Utilitaires (conserv√©s)
python-dotenv>=1.0.0          # Environment variables
pydantic>=2.5.0               # Data validation
pydantic-settings>=2.1.0      # Settings management

# Portabilit√© sp√©cifique
psutil>=5.9.0                 # System utilities
portalocker>=2.7.0           # File locking portable"""

        with open(self.root_dir / "backend" / "requirements_portable.txt", 'w') as f:
            f.write(portable_requirements)
            
        print("‚úÖ Requirements portable cr√©√©s")
    
    def create_launcher_scripts(self):
        """Cr√©e les scripts de lancement pour tous les OS"""
        print("üöÄ Cr√©ation des scripts de lancement...")
        
        # Le script principal d√©j√† cr√©√© via bulk_file_writer
        
        # Rendre les scripts ex√©cutables sur Unix
        if self.system != "windows":
            scripts = [
                "START_TOOLKIT.sh",
                "portable/launcher/start_linux.sh",
                "portable/launcher/start_macos.sh"
            ]
            
            for script in scripts:
                script_path = self.root_dir / script
                if script_path.exists():
                    os.chmod(script_path, 0o755)
                    
        print("‚úÖ Scripts de lancement cr√©√©s")
    
    def create_config_files(self):
        """Cr√©e les fichiers de configuration portable"""
        print("‚öôÔ∏è Configuration portable...")
        
        # Configuration des services disponibles
        services_config = {
            "cybersecurity": {
                "enabled": True,
                "services": [
                    "audit", "pentest", "incident_response", "digital_forensics",
                    "vulnerability_management", "compliance", "monitoring",
                    "red_team", "blue_team", "cloud_security", "mobile_security",
                    "iot_security", "web3_security", "ai_security", "network_security",
                    "api_security", "container_security", "iac_security",
                    "social_engineering", "threat_intelligence", "security_orchestration",
                    "risk_assessment", "security_training"
                ]
            },
            "ai_core": {
                "enabled": True,
                "services": [
                    "assistant", "cyber_ai", "conversational_ai", "predictive_ai",
                    "business_ai", "automation_ai", "code_analysis_ai"
                ]
            },
            "business": {
                "enabled": True,
                "services": ["crm", "billing", "analytics", "planning", "training"]
            }
        }
        
        with open(self.portable_dir / "config" / "services.json", 'w') as f:
            json.dump(services_config, f, indent=2)
            
        # Configuration des ports par d√©faut
        ports_config = {
            "backend_start": 8000,
            "frontend_start": 3000,
            "database_start": 27000,
            "scan_range": 100
        }
        
        with open(self.portable_dir / "config" / "ports.json", 'w') as f:
            json.dump(ports_config, f, indent=2)
            
        print("‚úÖ Configuration portable cr√©√©e")
    
    def create_readme_portable(self):
        """Cr√©e un README sp√©cifique pour la version portable"""
        readme_content = """# üõ°Ô∏è CyberSec Toolkit Pro 2025 - PORTABLE USB

## üöÄ D√âMARRAGE RAPIDE

### Windows
Double-cliquez sur `START_TOOLKIT.bat`

### Linux/macOS  
Ex√©cutez `./START_TOOLKIT.sh`

## üìã PR√âREQUIS

### Windows
- Python 3.8+ (auto-d√©tect√© ou utilise la version portable)
- Navigateur web moderne

### Linux/macOS
- Python 3.8+ 
- Node.js 16+
- Yarn

## üîß FONCTIONNALIT√âS PORTABLES

‚úÖ **Base de donn√©es SQLite portable** (pas besoin de MongoDB)
‚úÖ **D√©tection automatique de ports libres**
‚úÖ **Configuration automatique selon l'OS**
‚úÖ **Tous les 35 services cybers√©curit√© conserv√©s**
‚úÖ **Interface web moderne identique**
‚úÖ **Donn√©es enti√®rement portables sur cl√© USB**

## üõ†Ô∏è D√âPANNAGE

Si l'application ne d√©marre pas :
1. V√©rifiez que Python est install√©
2. Lancez `python setup_portable.py` 
3. Red√©marrez avec le script appropri√©

## üìö DOCUMENTATION COMPL√àTE

Consultez les fichiers de documentation pour l'architecture compl√®te :
- `ARCHITECTURE.md` - Architecture technique
- `ROADMAP.md` - Plan de d√©veloppement  
- `DEPLOYMENT.md` - Guide de d√©ploiement
"""
        
        with open(self.root_dir / "README_PORTABLE.md", 'w') as f:
            f.write(readme_content)
            
        print("‚úÖ README portable cr√©√©")
    
    def run_setup(self):
        """Ex√©cute la configuration compl√®te"""
        print("üéØ Configuration portable de CyberSec Toolkit Pro 2025")
        print("=" * 50)
        
        self.create_structure()
        self.setup_database()
        self.create_portable_requirements()
        self.create_launcher_scripts()
        self.create_config_files()
        self.create_readme_portable()
        
        print("")
        print("‚úÖ CONFIGURATION PORTABLE TERMIN√âE")
        print("üöÄ Utilisez START_TOOLKIT.bat (Windows) ou START_TOOLKIT.sh (Linux/macOS)")
        print("üì± L'application sera portable sur n'importe quelle cl√© USB")

if __name__ == "__main__":
    setup = PortableSetup()
    setup.run_setup()